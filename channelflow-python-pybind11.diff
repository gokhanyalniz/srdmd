diff --git a/CMakeLists.txt b/CMakeLists.txt
index e2bdfa7..abf5b4a 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -22,7 +22,7 @@ OPTION(USE_MPI "use mpi, if found" ON) # use -DUSE_MPI=off to force disable use
 OPTION(BUILD_SHARED_LIBS "Builds shared libraries if ON, static libraries if OFF" ON)
 OPTION(SET_RPATH "set the rpath of the executable to the found libraries" ON)
 OPTION(WITH_NSOLVER "compile support for the nsolver module" ON)
-OPTION(WITH_PYTHON "build a python wrapper, using boost-python" OFF)
+OPTION(WITH_PYTHON "build a python wrapper, using pybind11" OFF)
 OPTION(WITH_HDF5CXX "enable legacy file format using hdf5 cxx" OFF)
 OPTION(WITH_GTEST "enable gtest unit testing" ON)
 
@@ -190,14 +190,14 @@ add_subdirectory(programs)
 add_subdirectory(tools)
 add_subdirectory(examples)
 
-# Check if we want to build the python wrapper and have boost-python
-# If Python and boost.python are there, build python interface
+# Check if we want to build the python wrapper and have pybind11
+# If Python and pybind11 are there, build python interface
 if (WITH_PYTHON)
     if (USE_MPI)
             message(FATAL_ERROR "Compiling the python wrapper requires -DUSE_MPI=OFF")
     endif()
-    find_package(Boost COMPONENTS python REQUIRED)
-    find_package(PythonLibs 2.7 REQUIRED)
+    find_package(pybind11 REQUIRED)
+    find_package(PythonLibs REQUIRED)
     message(STATUS "Building with Python interface.")
     add_subdirectory(python-wrapper)
 endif ()
diff --git a/INSTALL.md b/INSTALL.md
index a4c6a99..ab8c56f 100644
--- a/INSTALL.md
+++ b/INSTALL.md
@@ -22,7 +22,7 @@ To enable parallelization, to use the NetCDF format (easy visualization with Par
 * HDF5(cxx) (format available for backwards compatibility)
 
 To use Channelflow functions from the Python wrapper:
-* boost-python
+* pybind11
 
 
 ### Compilation
@@ -49,7 +49,7 @@ Channelflow supports, beneath other standard cmake flags, the following options
 |`-DUSE_MPI`              | ON/OFF  | ON        | Enable MPI                                                        |
 |`-DWITH_SHARED`          | ON/OFF  | ON        | build shared channelflow and nsolver libraries                    |
 |`-DWITH_STATIC`          | ON/OFF  | OFF       | build static libraries (also enables linking to static libraries) |
-|`-DWITH_PYTHON`          | ON/OFF  | OFF       | build a python wrapper for flowfields, disabled by default because it requires boost-python |
+|`-DWITH_PYTHON`          | ON/OFF  | OFF       | build a python wrapper for flowfields, disabled by default because it requires pybind11 |
 |`-DWITH_HDF5CXX`         |  ON/OFF | OFF       | enable legacy .h5 file format (using HDF5 C++)                    |
 
 
diff --git a/cmake/Modules/GetGitRevisionDescription.cmake b/cmake/Modules/GetGitRevisionDescription.cmake
index 85eae15..cda732e 100644
--- a/cmake/Modules/GetGitRevisionDescription.cmake
+++ b/cmake/Modules/GetGitRevisionDescription.cmake
@@ -24,11 +24,6 @@
 # 2009-2010 Ryan Pavlik <rpavlik@iastate.edu> <abiryan@ryand.net>
 # http://academic.cleardefinition.com
 # Iowa State University HCI Graduate Program/VRAC
-#
-# Copyright Iowa State University 2009-2010.
-# Distributed under the Boost Software License, Version 1.0.
-# (See accompanying file LICENSE_1_0.txt or copy at
-# http://www.boost.org/LICENSE_1_0.txt)
 
 if(__get_git_revision_description)
 	return()
diff --git a/cmake/Modules/GetGitRevisionDescription.cmake.in b/cmake/Modules/GetGitRevisionDescription.cmake.in
index 6d8b708..f9b5ad9 100644
--- a/cmake/Modules/GetGitRevisionDescription.cmake.in
+++ b/cmake/Modules/GetGitRevisionDescription.cmake.in
@@ -7,12 +7,6 @@
 # 2009-2010 Ryan Pavlik <rpavlik@iastate.edu> <abiryan@ryand.net>
 # http://academic.cleardefinition.com
 # Iowa State University HCI Graduate Program/VRAC
-#
-# Copyright Iowa State University 2009-2010.
-# Distributed under the Boost Software License, Version 1.0.
-# (See accompanying file LICENSE_1_0.txt or copy at
-# http://www.boost.org/LICENSE_1_0.txt)
-
 set(HEAD_HASH)
 
 file(READ "@HEAD_FILE@" HEAD_CONTENTS LIMIT 1024)
diff --git a/python-wrapper/CMakeLists.txt b/python-wrapper/CMakeLists.txt
index 07d5b92..5a266ff 100644
--- a/python-wrapper/CMakeLists.txt
+++ b/python-wrapper/CMakeLists.txt
@@ -10,6 +10,5 @@ set(
 )
 
 # Define the target with appropriate dependencies
-install_channelflow_library(pycf)
-target_include_directories(pycf SYSTEM PUBLIC ${Boost_INCLUDE_DIRS} ${PYTHON_INCLUDE_DIRS})
-target_link_libraries(pycf PUBLIC ${Boost_LIBRARIES} nsolver chflow)
+pybind11_add_module(libpycf cfwrapper.cpp)
+target_link_libraries(libpycf PUBLIC ${pybind11_LIBRARIES} nsolver chflow)
\ No newline at end of file
diff --git a/python-wrapper/cfwrapper.cpp b/python-wrapper/cfwrapper.cpp
index e0cd460..a718508 100644
--- a/python-wrapper/cfwrapper.cpp
+++ b/python-wrapper/cfwrapper.cpp
@@ -3,114 +3,143 @@
  * License is GNU GPL version 2 or later: ./LICENCE
  */
 
-#include <boost/python.hpp>
-#define NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION
-
+#include <pybind11/pybind11.h>
+#include <pybind11/operators.h>
+#include <pybind11/complex.h>
 #include "channelflow/diffops.h"
 #include "channelflow/flowfield.h"
 #include "channelflow/symmetry.h"
 
 using namespace std;
-using namespace boost::python;
+namespace py = pybind11;
 
 namespace chflow {
 
 /*** Access functions for FlowField values ***/
-Real FlowField_get_val(FlowField& self, boost::python::tuple t) {
-    extract<int> nx(t[0]), ny(t[1]), nz(t[2]), i(t[3]);  // A check that len(t) = 4 would be helpful
-    if (self.xzstate() == Spectral)
-        throw runtime_error("Trying to access physical data, but FlowField is in spectral state");
-    return self(nx, ny, nz, i);
-}
+// Real FlowField_get_val(FlowField& self, py::tuple t) {
+//     if (self.xzstate() == Spectral)
+//         throw runtime_error("Trying to access physical data, but FlowField is in spectral state");
+//     int nx = py::cast<int>(t[0]);
+//     int ny = py::cast<int>(t[1]);
+//     int nz = py::cast<int>(t[2]);
+//     int i = py::cast<int>(t[3]);
+//     return self(nx, ny, nz, i);
+// }
 
-void FlowField_set_val(FlowField& self, boost::python::tuple t, Real val) {
-    if (self.xzstate() == Spectral)
-        throw runtime_error("Trying to access physical data, but FlowField is in spectral state");
-    extract<int> nx(t[0]), ny(t[1]), nz(t[2]), i(t[3]);
-    self(nx, ny, nz, i) = val;
-}
+// void FlowField_set_val(FlowField& self, py::tuple t, Real val) {
+//     if (self.xzstate() == Spectral)
+//         throw runtime_error("Trying to access physical data, but FlowField is in spectral state");
+//     int nx = py::cast<int>(t[0]);
+//     int ny = py::cast<int>(t[1]);
+//     int nz = py::cast<int>(t[2]);
+//     int i = py::cast<int>(t[3]);
+//     self(nx, ny, nz, i) = val;
+// }
 
-Complex FlowField_get_cmplx(FlowField& self, int nx, int ny, int nz, int i) {
+Complex FlowField_get_cmplx(FlowField& self, py::tuple t) {
     if (self.xzstate() == Physical)
         throw runtime_error("Trying to access spectral data, but FlowField is in physical state");
+    int nx = py::cast<int>(t[0]);
+    int ny = py::cast<int>(t[1]);
+    int nz = py::cast<int>(t[2]);
+    int i = py::cast<int>(t[3]);
     return self.cmplx(nx, ny, nz, i);
 }
 
+void FlowField_set_cmplx(FlowField& self, py::tuple t, Complex val) {
+    if (self.xzstate() == Physical)
+        throw runtime_error("Trying to access spectral data, but FlowField is in physical state");
+    int nx = py::cast<int>(t[0]);
+    int ny = py::cast<int>(t[1]);
+    int nz = py::cast<int>(t[2]);
+    int i = py::cast<int>(t[3]);
+    self.cmplx(nx, ny, nz, i) = val;
+}
+
 /*** Wrapper functions ***/
 // They are needed because Python can't handle overloaded functions. So for each
 // function with a default argument, we need a wrapper function that has a fixed
 // number of arguments
-Real L2Norm_wrapped(const FlowField& f) { return L2Norm(f); }
-Real L2Norm2_wrapped(const FlowField& f) { return L2Norm2(f); }
-Real L2Dist_wrapped(const FlowField& f, const FlowField& g) { return L2Dist(f, g); }
-Real L2IP_wrapped(const FlowField& f, const FlowField& g) { return L2InnerProduct(f, g); }
-Real wallshear_wrapped(const FlowField& f) { return wallshear(f); }
-Real wallshearUpper_wrapped(const FlowField& f) { return wallshearUpper(f); }
-Real wallshearLower_wrapped(const FlowField& f) { return wallshearLower(f); }
-Real L2Norm3d_wrapped(const FlowField& f) { return L2Norm3d(f); }
-Real Ecf_wrapped(const FlowField& f) { return Ecf(f); }
+// Real L2Norm_wrapped(const FlowField& f) { return L2Norm(f); }
+// Real L2Norm2_wrapped(const FlowField& f) { return L2Norm2(f); }
+// Real L2Dist_wrapped(const FlowField& f, const FlowField& g) { return L2Dist(f, g); }
+Real L2IP_wrapped(const FlowField& f, const FlowField& g) {
+    py::gil_scoped_release release;
+    Real res = L2InnerProduct(f, g);
+    py::gil_scoped_acquire acquire;
+    return res;
+}
+// Real wallshear_wrapped(const FlowField& f) { return wallshear(f); }
+// Real wallshearUpper_wrapped(const FlowField& f) { return wallshearUpper(f); }
+// Real wallshearLower_wrapped(const FlowField& f) { return wallshearLower(f); }
+// Real L2Norm3d_wrapped(const FlowField& f) { return L2Norm3d(f); }
+// Real Ecf_wrapped(const FlowField& f) { return Ecf(f); }
 FlowField curl_wrapped(const FlowField& f) { return curl(f); }
-FlowField lapl_wrapped(const FlowField& f) { return lapl(f); }
-FlowField grad_wrapped(const FlowField& f) { return grad(f); }
-FlowField div_wrapped(const FlowField& f) { return div(f); }
+// FlowField lapl_wrapped(const FlowField& f) { return lapl(f); }
+// FlowField grad_wrapped(const FlowField& f) { return grad(f); }
+// FlowField div_wrapped(const FlowField& f) { return div(f); }
 
-FlowField diff_wrapped(const FlowField& f, int i, int n) { return diff(f, i, n); }
+// FlowField diff_wrapped(const FlowField& f, int i, int n) { return diff(f, i, n); }
 void FlowField_save(const FlowField& self, string filebase) { self.save(filebase); }
 
 /*** The actual python module ***/
-BOOST_PYTHON_MODULE(libpycf) {
-    class_<FlowField>("FlowField", init<>())
-        .def(init<string>())
-        .def(init<FlowField>())
-        .def(init<int, int, int, int, Real, Real, Real, Real>())
+PYBIND11_MODULE(libpycf, m) {
+    py::class_<FlowField>(m, "FlowField")
+        .def(py::init<string>())
+        .def(py::init<FlowField>())
+        .def(py::init<int, int, int, int, Real, Real, Real, Real>())
         .def("save", &FlowField_save)
-        .def("get", &FlowField_get_val)
-        .def("cmplx", &FlowField_get_cmplx)
-        .def("__getitem__", &FlowField_get_val)
-        .def("__setitem__", &FlowField_set_val)
-        .def("makePhysical", &FlowField::makePhysical)
-        .def("makeSpectral", &FlowField::makeSpectral)
-        .def("setToZero", &FlowField::setToZero)
-        .add_property("Nx", &FlowField::Nx)
-        .add_property("Ny", &FlowField::Ny)
-        .add_property("Nz", &FlowField::Nz)
-        .add_property("Nd", &FlowField::Nd)
-        .add_property("Mx", &FlowField::Mx)
-        .add_property("My", &FlowField::My)
-        .add_property("Mz", &FlowField::Mz)
-        .add_property("Lx", &FlowField::Lx)
-        .add_property("Ly", &FlowField::Ly)
-        .add_property("Lz", &FlowField::Lz)
-        .add_property("a", &FlowField::a)
-        .add_property("b", &FlowField::b)
-        .def("x", &FlowField::x)
-        .def("y", &FlowField::y)
-        .def("z", &FlowField::z)
-        .def(self *= Real())
-        .def(self += self)
-        .def(self -= self);
+        // .def("get", &FlowField_get_val)
+        // .def("set", &FlowField_set_val)
+        .def("__getitem__", &FlowField_get_cmplx)
+        .def("__setitem__", &FlowField_set_cmplx)
+        // .def("makePhysical", &FlowField::makePhysical)
+        // .def("makeSpectral", &FlowField::makeSpectral)
+        .def("zeroPaddedModes", &FlowField::zeroPaddedModes)
+        // .def("setToZero", &FlowField::setToZero)
+        .def_property_readonly("Nx", &FlowField::Nx)
+        .def_property_readonly("Ny", &FlowField::Ny)
+        .def_property_readonly("Nz", &FlowField::Nz)
+        .def_property_readonly("Nd", &FlowField::Nd)
+        // .def_property_readonly("Mx", &FlowField::Mx)
+        // .def_property_readonly("My", &FlowField::My)
+        // .def_property_readonly("Mz", &FlowField::Mz)
+        .def_property_readonly("Lx", &FlowField::Lx)
+        // .def_property_readonly("Ly", &FlowField::Ly)
+        .def_property_readonly("Lz", &FlowField::Lz)
+        .def_property_readonly("a", &FlowField::a)
+        .def_property_readonly("b", &FlowField::b)
+        // .def("x", &FlowField::x)
+        // .def("y", &FlowField::y)
+        // .def("z", &FlowField::z)
+        .def(py::self *= Real())
+        .def(Real() * py::self)
+        .def(py::self + py::self)
+        .def(py::self - py::self)
+        .def(py::self += py::self)
+        .def(py::self -= py::self);
 
-    class_<FieldSymmetry>("FieldSymmetry", init<>())
-        .def(init<FieldSymmetry>())
-        .def(init<string>())
-        .def(init<int, int, int, Real, Real, int>())
-        .add_property("sx", &FieldSymmetry::sx)
-        .add_property("sy", &FieldSymmetry::sy)
-        .add_property("sz", &FieldSymmetry::sz)
-        .add_property("ax", &FieldSymmetry::ax)
-        .add_property("az", &FieldSymmetry::az)
+    py::class_<FieldSymmetry>(m, "FieldSymmetry")
+        .def(py::init<FieldSymmetry>())
+        .def(py::init<string>())
+        .def(py::init<int, int, int, Real, Real, int>())
+        .def_property_readonly("sx", &FieldSymmetry::sx)
+        .def_property_readonly("sy", &FieldSymmetry::sy)
+        .def_property_readonly("sz", &FieldSymmetry::sz)
+        .def_property_readonly("ax", &FieldSymmetry::ax)
+        .def_property_readonly("az", &FieldSymmetry::az)
         .def("__call__",
              static_cast<FlowField (FieldSymmetry::*)(const FlowField& u) const>(&FieldSymmetry::operator()));
 
-    def("L2Norm", &L2Norm_wrapped);
-    def("L2Norm2", &L2Norm2_wrapped);
-    def("L2Dist", &L2Dist_wrapped);
-    def("L2IP", &L2IP_wrapped);
-    def("wallshear", &wallshear_wrapped);
-    def("wallshearLower", &wallshearLower_wrapped);
-    def("wallshearUpper", &wallshearUpper_wrapped);
-    def("L2Norm3d", &L2Norm3d_wrapped);
-    def("curl", &curl_wrapped);
+    // m.def("L2Norm", &L2Norm_wrapped);
+    // m.def("L2Norm2", &L2Norm2_wrapped);
+    // m.def("L2Dist", &L2Dist_wrapped);
+    m.def("L2IP", &L2IP_wrapped);
+    // m.def("wallshear", &wallshear_wrapped);
+    // m.def("wallshearLower", &wallshearLower_wrapped);
+    // m.def("wallshearUpper", &wallshearUpper_wrapped);
+    // m.def("L2Norm3d", &L2Norm3d_wrapped);
+    m.def("curl", &curl_wrapped);
 }
 
 }  // namespace chflow
